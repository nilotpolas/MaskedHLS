// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================



module reg_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] x;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return <= x;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

endmodule //reg_int_s

module sbox (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0_0,
        x1_0,
        x2_0,
        x3_0,
        x0_1,
        x1_1,
        x2_1,
        x3_1,
        r1,
        r2,
        Y0_0,
        Y0_0_ap_vld,
        Y1_0,
        Y1_0_ap_vld,
        Y2_0,
        Y2_0_ap_vld,
        Y3_0,
        Y3_0_ap_vld,
        Y0_1,
        Y0_1_ap_vld,
        Y1_1,
        Y1_1_ap_vld,
        Y2_1,
        Y2_1_ap_vld,
        Y3_1,
        Y3_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x0_0;
input   x1_0;
input   x2_0;
input   x3_0;
input   x0_1;
input   x1_1;
input   x2_1;
input   x3_1;
input   r1;
input   r2;
output   Y0_0;
output   Y0_0_ap_vld;
output   Y1_0;
output   Y1_0_ap_vld;
output   Y2_0;
output   Y2_0_ap_vld;
output   Y3_0;
output   Y3_0_ap_vld;
output   Y0_1;
output   Y0_1_ap_vld;
output   Y1_1;
output   Y1_1_ap_vld;
output   Y2_1;
output   Y2_1_ap_vld;
output   Y3_1;
output   Y3_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Y0_0_ap_vld;
reg Y1_0_ap_vld;
reg Y2_0_ap_vld;
reg Y3_0_ap_vld;
reg Y0_1_ap_vld;
reg Y1_1_ap_vld;
reg Y2_1_ap_vld;
reg Y3_1_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] xor_ln191_fu_556_p2;
reg   [0:0] xor_ln191_reg_738;
wire   [0:0] xor_ln192_fu_593_p2;
reg   [0:0] xor_ln192_reg_743;
wire   [0:0] xor_ln193_fu_618_p2;
reg   [0:0] xor_ln193_reg_748;
wire   [0:0] xor_ln194_fu_631_p2;
reg   [0:0] xor_ln194_reg_753;
wire   [0:0] xor_ln195_fu_650_p2;
reg   [0:0] xor_ln195_reg_758;
wire   [0:0] xor_ln196_fu_687_p2;
reg   [0:0] xor_ln196_reg_763;
wire   [0:0] xor_ln197_fu_712_p2;
reg   [0:0] xor_ln197_reg_768;
wire   [0:0] xor_ln198_fu_725_p2;
reg   [0:0] xor_ln198_reg_773;
wire    grp_reg_int_s_fu_562_ap_start;
wire    grp_reg_int_s_fu_562_ap_done;
wire    grp_reg_int_s_fu_562_ap_idle;
wire    grp_reg_int_s_fu_562_ap_ready;
wire   [0:0] grp_reg_int_s_fu_562_ap_return;
wire    grp_reg_int_s_fu_599_ap_start;
wire    grp_reg_int_s_fu_599_ap_done;
wire    grp_reg_int_s_fu_599_ap_idle;
wire    grp_reg_int_s_fu_599_ap_ready;
wire   [0:0] grp_reg_int_s_fu_599_ap_return;
wire    grp_reg_int_s_fu_624_ap_start;
wire    grp_reg_int_s_fu_624_ap_done;
wire    grp_reg_int_s_fu_624_ap_idle;
wire    grp_reg_int_s_fu_624_ap_ready;
wire   [0:0] grp_reg_int_s_fu_624_ap_return;
wire    grp_reg_int_s_fu_637_ap_start;
wire    grp_reg_int_s_fu_637_ap_done;
wire    grp_reg_int_s_fu_637_ap_idle;
wire    grp_reg_int_s_fu_637_ap_ready;
wire   [0:0] grp_reg_int_s_fu_637_ap_return;
wire    grp_reg_int_s_fu_656_ap_start;
wire    grp_reg_int_s_fu_656_ap_done;
wire    grp_reg_int_s_fu_656_ap_idle;
wire    grp_reg_int_s_fu_656_ap_ready;
wire   [0:0] grp_reg_int_s_fu_656_ap_return;
wire    grp_reg_int_s_fu_693_ap_start;
wire    grp_reg_int_s_fu_693_ap_done;
wire    grp_reg_int_s_fu_693_ap_idle;
wire    grp_reg_int_s_fu_693_ap_ready;
wire   [0:0] grp_reg_int_s_fu_693_ap_return;
wire    grp_reg_int_s_fu_718_ap_start;
wire    grp_reg_int_s_fu_718_ap_done;
wire    grp_reg_int_s_fu_718_ap_idle;
wire    grp_reg_int_s_fu_718_ap_ready;
wire   [0:0] grp_reg_int_s_fu_718_ap_return;
wire    grp_reg_int_s_fu_731_ap_start;
wire    grp_reg_int_s_fu_731_ap_done;
wire    grp_reg_int_s_fu_731_ap_idle;
wire    grp_reg_int_s_fu_731_ap_ready;
wire   [0:0] grp_reg_int_s_fu_731_ap_return;
reg    grp_reg_int_s_fu_562_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_reg_int_s_fu_599_ap_start_reg;
reg    grp_reg_int_s_fu_624_ap_start_reg;
reg    grp_reg_int_s_fu_637_ap_start_reg;
reg    grp_reg_int_s_fu_656_ap_start_reg;
reg    grp_reg_int_s_fu_693_ap_start_reg;
reg    grp_reg_int_s_fu_718_ap_start_reg;
reg    grp_reg_int_s_fu_731_ap_start_reg;
reg    ap_block_state2_on_subcall_done;
wire   [0:0] L1_0_fu_166_p0;
wire   [0:0] L1_0_fu_166_p1;
wire   [0:0] L5_0_fu_172_p0;
wire   [0:0] L5_0_fu_172_p1;
wire   [0:0] L1_1_fu_178_p0;
wire   [0:0] L1_1_fu_178_p1;
wire   [0:0] L5_1_fu_184_p0;
wire   [0:0] L5_1_fu_184_p1;
wire   [0:0] xor_ln89_fu_190_p0;
wire   [0:0] xor_ln89_fu_190_p1;
wire   [0:0] xor_ln89_fu_190_p2;
wire   [0:0] L1_0_fu_166_p2;
wire   [0:0] xor_ln93_fu_208_p0;
wire   [0:0] xor_ln93_fu_208_p1;
wire   [0:0] xor_ln93_fu_208_p2;
wire   [0:0] L1_1_fu_178_p2;
wire   [0:0] b0_preshared_hpc10_fu_226_p0;
wire   [0:0] Q1_0_fu_202_p2;
wire   [0:0] b1_preshared_hpc10_fu_232_p0;
wire   [0:0] Q1_1_fu_220_p2;
wire   [0:0] b1_preshared_hpc10_fu_232_p2;
wire   [0:0] Q0_0_fu_196_p2;
wire   [0:0] b0_preshared_hpc10_fu_226_p2;
wire   [0:0] Q0_1_fu_214_p2;
wire   [0:0] p1_hpc10_fu_250_p2;
wire   [0:0] xor_ln117_fu_262_p1;
wire   [0:0] xor_ln117_fu_262_p2;
wire   [0:0] p2_hpc10_fu_238_p2;
wire   [0:0] p4_hpc10_fu_256_p2;
wire   [0:0] xor_ln118_fu_274_p1;
wire   [0:0] xor_ln118_fu_274_p2;
wire   [0:0] p3_hpc10_fu_244_p2;
wire   [0:0] xor_ln129_fu_286_p0;
wire   [0:0] xor_ln129_fu_286_p1;
wire   [0:0] xor_ln129_fu_286_p2;
wire   [0:0] xor_ln130_fu_298_p0;
wire   [0:0] xor_ln130_fu_298_p1;
wire   [0:0] xor_ln130_fu_298_p2;
wire   [0:0] p2_hpc11_fu_310_p0;
wire   [0:0] b1_preshared_hpc11_fu_304_p2;
wire   [0:0] p3_hpc11_fu_316_p0;
wire   [0:0] b0_preshared_hpc11_fu_292_p2;
wire   [0:0] p1_hpc11_fu_322_p0;
wire   [0:0] p4_hpc11_fu_328_p0;
wire   [0:0] p1_hpc11_fu_322_p2;
wire   [0:0] xor_ln137_fu_334_p1;
wire   [0:0] xor_ln137_fu_334_p2;
wire   [0:0] p2_hpc11_fu_310_p2;
wire   [0:0] p4_hpc11_fu_328_p2;
wire   [0:0] xor_ln138_fu_346_p1;
wire   [0:0] xor_ln138_fu_346_p2;
wire   [0:0] p3_hpc11_fu_316_p2;
wire   [0:0] T0_0_fu_268_p2;
wire   [0:0] xor_ln139_fu_358_p1;
wire   [0:0] xor_ln139_fu_358_p2;
wire   [0:0] T2_0_fu_340_p2;
wire   [0:0] xor_ln142_1_fu_376_p0;
wire   [0:0] xor_ln142_1_fu_376_p2;
wire   [0:0] xor_ln142_fu_370_p2;
wire   [0:0] T0_1_fu_280_p2;
wire   [0:0] xor_ln143_fu_388_p1;
wire   [0:0] xor_ln143_fu_388_p2;
wire   [0:0] T2_1_fu_352_p2;
wire   [0:0] xor_ln146_1_fu_406_p0;
wire   [0:0] xor_ln146_1_fu_406_p2;
wire   [0:0] xor_ln146_fu_400_p2;
wire   [0:0] xor_ln155_fu_418_p0;
wire   [0:0] xor_ln155_fu_418_p1;
wire   [0:0] xor_ln155_fu_418_p2;
wire   [0:0] xor_ln156_fu_430_p0;
wire   [0:0] xor_ln156_fu_430_p1;
wire   [0:0] xor_ln156_fu_430_p2;
wire   [0:0] Q2_0_fu_364_p2;
wire   [0:0] b1_preshared_hpc12_fu_436_p2;
wire   [0:0] Q2_1_fu_394_p2;
wire   [0:0] b0_preshared_hpc12_fu_424_p2;
wire   [0:0] p1_hpc12_fu_454_p2;
wire   [0:0] xor_ln163_fu_466_p1;
wire   [0:0] xor_ln163_fu_466_p2;
wire   [0:0] p2_hpc12_fu_442_p2;
wire   [0:0] p4_hpc12_fu_460_p2;
wire   [0:0] xor_ln164_fu_478_p1;
wire   [0:0] xor_ln164_fu_478_p2;
wire   [0:0] p3_hpc12_fu_448_p2;
wire   [0:0] L5_0_fu_172_p2;
wire   [0:0] xor_ln173_fu_490_p1;
wire   [0:0] xor_ln173_fu_490_p2;
wire   [0:0] L5_1_fu_184_p2;
wire   [0:0] xor_ln174_fu_502_p1;
wire   [0:0] xor_ln174_fu_502_p2;
wire   [0:0] Q6_0_fu_382_p2;
wire   [0:0] b1_preshared_hpc13_fu_508_p2;
wire   [0:0] Q6_1_fu_412_p2;
wire   [0:0] b0_preshared_hpc13_fu_496_p2;
wire   [0:0] T1_0_fu_472_p2;
wire   [0:0] T1_1_fu_484_p2;
wire   [0:0] xor_ln191_1_fu_550_p1;
wire   [0:0] xor_ln191_1_fu_550_p2;
wire   [0:0] L7_0_fu_538_p2;
wire   [0:0] p1_hpc13_fu_526_p2;
wire   [0:0] xor_ln192_1_fu_569_p1;
wire   [0:0] xor_ln192_1_fu_569_p2;
wire   [0:0] xor_ln192_2_fu_575_p1;
wire   [0:0] p2_hpc13_fu_514_p2;
wire   [0:0] xor_ln192_3_fu_581_p2;
wire   [0:0] xor_ln192_4_fu_587_p1;
wire   [0:0] xor_ln192_4_fu_587_p2;
wire   [0:0] xor_ln192_2_fu_575_p2;
wire   [0:0] xor_ln193_1_fu_606_p1;
wire   [0:0] xor_ln193_2_fu_612_p2;
wire   [0:0] xor_ln193_1_fu_606_p2;
wire   [0:0] xor_ln195_1_fu_644_p1;
wire   [0:0] xor_ln195_1_fu_644_p2;
wire   [0:0] L7_1_fu_544_p2;
wire   [0:0] p4_hpc13_fu_532_p2;
wire   [0:0] xor_ln196_1_fu_663_p1;
wire   [0:0] xor_ln196_1_fu_663_p2;
wire   [0:0] xor_ln196_2_fu_669_p1;
wire   [0:0] p3_hpc13_fu_520_p2;
wire   [0:0] xor_ln196_3_fu_675_p2;
wire   [0:0] xor_ln196_4_fu_681_p1;
wire   [0:0] xor_ln196_4_fu_681_p2;
wire   [0:0] xor_ln196_2_fu_669_p2;
wire   [0:0] xor_ln197_1_fu_700_p1;
wire   [0:0] xor_ln197_2_fu_706_p2;
wire   [0:0] xor_ln197_1_fu_700_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_reg_int_s_fu_562_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_599_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_624_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_637_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_656_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_693_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_718_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_731_ap_start_reg = 1'b0;
end

reg_int_s grp_reg_int_s_fu_562(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_562_ap_start),
    .ap_done(grp_reg_int_s_fu_562_ap_done),
    .ap_idle(grp_reg_int_s_fu_562_ap_idle),
    .ap_ready(grp_reg_int_s_fu_562_ap_ready),
    .x(xor_ln191_reg_738),
    .ap_return(grp_reg_int_s_fu_562_ap_return)
);

reg_int_s grp_reg_int_s_fu_599(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_599_ap_start),
    .ap_done(grp_reg_int_s_fu_599_ap_done),
    .ap_idle(grp_reg_int_s_fu_599_ap_idle),
    .ap_ready(grp_reg_int_s_fu_599_ap_ready),
    .x(xor_ln192_reg_743),
    .ap_return(grp_reg_int_s_fu_599_ap_return)
);

reg_int_s grp_reg_int_s_fu_624(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_624_ap_start),
    .ap_done(grp_reg_int_s_fu_624_ap_done),
    .ap_idle(grp_reg_int_s_fu_624_ap_idle),
    .ap_ready(grp_reg_int_s_fu_624_ap_ready),
    .x(xor_ln193_reg_748),
    .ap_return(grp_reg_int_s_fu_624_ap_return)
);

reg_int_s grp_reg_int_s_fu_637(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_637_ap_start),
    .ap_done(grp_reg_int_s_fu_637_ap_done),
    .ap_idle(grp_reg_int_s_fu_637_ap_idle),
    .ap_ready(grp_reg_int_s_fu_637_ap_ready),
    .x(xor_ln194_reg_753),
    .ap_return(grp_reg_int_s_fu_637_ap_return)
);

reg_int_s grp_reg_int_s_fu_656(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_656_ap_start),
    .ap_done(grp_reg_int_s_fu_656_ap_done),
    .ap_idle(grp_reg_int_s_fu_656_ap_idle),
    .ap_ready(grp_reg_int_s_fu_656_ap_ready),
    .x(xor_ln195_reg_758),
    .ap_return(grp_reg_int_s_fu_656_ap_return)
);

reg_int_s grp_reg_int_s_fu_693(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_693_ap_start),
    .ap_done(grp_reg_int_s_fu_693_ap_done),
    .ap_idle(grp_reg_int_s_fu_693_ap_idle),
    .ap_ready(grp_reg_int_s_fu_693_ap_ready),
    .x(xor_ln196_reg_763),
    .ap_return(grp_reg_int_s_fu_693_ap_return)
);

reg_int_s grp_reg_int_s_fu_718(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_718_ap_start),
    .ap_done(grp_reg_int_s_fu_718_ap_done),
    .ap_idle(grp_reg_int_s_fu_718_ap_idle),
    .ap_ready(grp_reg_int_s_fu_718_ap_ready),
    .x(xor_ln197_reg_768),
    .ap_return(grp_reg_int_s_fu_718_ap_return)
);

reg_int_s grp_reg_int_s_fu_731(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_731_ap_start),
    .ap_done(grp_reg_int_s_fu_731_ap_done),
    .ap_idle(grp_reg_int_s_fu_731_ap_idle),
    .ap_ready(grp_reg_int_s_fu_731_ap_ready),
    .x(xor_ln198_reg_773),
    .ap_return(grp_reg_int_s_fu_731_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_562_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_562_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_562_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_562_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_599_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_599_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_599_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_599_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_624_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_624_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_624_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_624_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_637_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_637_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_637_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_637_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_656_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_656_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_656_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_656_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_693_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_693_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_693_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_693_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_718_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_718_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_718_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_718_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_731_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_731_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_731_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_731_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        xor_ln191_reg_738 <= xor_ln191_fu_556_p2;
        xor_ln192_reg_743 <= xor_ln192_fu_593_p2;
        xor_ln193_reg_748 <= xor_ln193_fu_618_p2;
        xor_ln194_reg_753 <= xor_ln194_fu_631_p2;
        xor_ln195_reg_758 <= xor_ln195_fu_650_p2;
        xor_ln196_reg_763 <= xor_ln196_fu_687_p2;
        xor_ln197_reg_768 <= xor_ln197_fu_712_p2;
        xor_ln198_reg_773 <= xor_ln198_fu_725_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y0_0_ap_vld = 1'b1;
    end else begin
        Y0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y0_1_ap_vld = 1'b1;
    end else begin
        Y0_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y1_0_ap_vld = 1'b1;
    end else begin
        Y1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y1_1_ap_vld = 1'b1;
    end else begin
        Y1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y2_0_ap_vld = 1'b1;
    end else begin
        Y2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y2_1_ap_vld = 1'b1;
    end else begin
        Y2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y3_0_ap_vld = 1'b1;
    end else begin
        Y3_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y3_1_ap_vld = 1'b1;
    end else begin
        Y3_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_0_fu_166_p0 = x0_0;

assign L1_0_fu_166_p1 = x1_0;

assign L1_0_fu_166_p2 = (L1_0_fu_166_p1 ^ L1_0_fu_166_p0);

assign L1_1_fu_178_p0 = x0_1;

assign L1_1_fu_178_p1 = x1_1;

assign L1_1_fu_178_p2 = (L1_1_fu_178_p1 ^ L1_1_fu_178_p0);

assign L5_0_fu_172_p0 = x0_0;

assign L5_0_fu_172_p1 = x3_0;

assign L5_0_fu_172_p2 = (L5_0_fu_172_p1 ^ L5_0_fu_172_p0);

assign L5_1_fu_184_p0 = x0_1;

assign L5_1_fu_184_p1 = x3_1;

assign L5_1_fu_184_p2 = (L5_1_fu_184_p1 ^ L5_1_fu_184_p0);

assign L7_0_fu_538_p2 = (T1_0_fu_472_p2 ^ T0_0_fu_268_p2);

assign L7_1_fu_544_p2 = (T1_1_fu_484_p2 ^ T0_1_fu_280_p2);

assign Q0_0_fu_196_p2 = (xor_ln89_fu_190_p2 ^ 1'd1);

assign Q0_1_fu_214_p2 = (xor_ln93_fu_208_p2 ^ 1'd1);

assign Q1_0_fu_202_p2 = (1'd1 ^ L1_0_fu_166_p2);

assign Q1_1_fu_220_p2 = (1'd1 ^ L1_1_fu_178_p2);

assign Q2_0_fu_364_p2 = (xor_ln139_fu_358_p2 ^ Q1_0_fu_202_p2);

assign Q2_1_fu_394_p2 = (xor_ln143_fu_388_p2 ^ Q1_1_fu_220_p2);

assign Q6_0_fu_382_p2 = (xor_ln142_fu_370_p2 ^ xor_ln142_1_fu_376_p2);

assign Q6_1_fu_412_p2 = (xor_ln146_fu_400_p2 ^ xor_ln146_1_fu_406_p2);

assign T0_0_fu_268_p2 = (xor_ln117_fu_262_p2 ^ p2_hpc10_fu_238_p2);

assign T0_1_fu_280_p2 = (xor_ln118_fu_274_p2 ^ p3_hpc10_fu_244_p2);

assign T1_0_fu_472_p2 = (xor_ln163_fu_466_p2 ^ p2_hpc12_fu_442_p2);

assign T1_1_fu_484_p2 = (xor_ln164_fu_478_p2 ^ p3_hpc12_fu_448_p2);

assign T2_0_fu_340_p2 = (xor_ln137_fu_334_p2 ^ p2_hpc11_fu_310_p2);

assign T2_1_fu_352_p2 = (xor_ln138_fu_346_p2 ^ p3_hpc11_fu_316_p2);

assign Y0_0 = grp_reg_int_s_fu_562_ap_return;

assign Y0_1 = grp_reg_int_s_fu_656_ap_return;

assign Y1_0 = grp_reg_int_s_fu_599_ap_return;

assign Y1_1 = grp_reg_int_s_fu_693_ap_return;

assign Y2_0 = grp_reg_int_s_fu_624_ap_return;

assign Y2_1 = grp_reg_int_s_fu_718_ap_return;

assign Y3_0 = grp_reg_int_s_fu_637_ap_return;

assign Y3_1 = grp_reg_int_s_fu_731_ap_return;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_int_s_fu_656_ap_done == 1'b0) | (grp_reg_int_s_fu_637_ap_done == 1'b0) | (grp_reg_int_s_fu_624_ap_done == 1'b0) | (grp_reg_int_s_fu_599_ap_done == 1'b0) | (grp_reg_int_s_fu_562_ap_done == 1'b0) | (grp_reg_int_s_fu_731_ap_done == 1'b0) | (grp_reg_int_s_fu_718_ap_done == 1'b0) | (grp_reg_int_s_fu_693_ap_done == 1'b0));
end

assign b0_preshared_hpc10_fu_226_p0 = r1;

assign b0_preshared_hpc10_fu_226_p2 = (b0_preshared_hpc10_fu_226_p0 ^ Q1_0_fu_202_p2);

assign b0_preshared_hpc11_fu_292_p2 = (xor_ln129_fu_286_p2 ^ 1'd1);

assign b0_preshared_hpc12_fu_424_p2 = (xor_ln155_fu_418_p2 ^ 1'd1);

assign b0_preshared_hpc13_fu_496_p2 = (xor_ln173_fu_490_p2 ^ T0_0_fu_268_p2);

assign b1_preshared_hpc10_fu_232_p0 = r1;

assign b1_preshared_hpc10_fu_232_p2 = (b1_preshared_hpc10_fu_232_p0 ^ Q1_1_fu_220_p2);

assign b1_preshared_hpc11_fu_304_p2 = (xor_ln130_fu_298_p2 ^ 1'd1);

assign b1_preshared_hpc12_fu_436_p2 = (xor_ln156_fu_430_p2 ^ 1'd1);

assign b1_preshared_hpc13_fu_508_p2 = (xor_ln174_fu_502_p2 ^ T0_1_fu_280_p2);

assign grp_reg_int_s_fu_562_ap_start = grp_reg_int_s_fu_562_ap_start_reg;

assign grp_reg_int_s_fu_599_ap_start = grp_reg_int_s_fu_599_ap_start_reg;

assign grp_reg_int_s_fu_624_ap_start = grp_reg_int_s_fu_624_ap_start_reg;

assign grp_reg_int_s_fu_637_ap_start = grp_reg_int_s_fu_637_ap_start_reg;

assign grp_reg_int_s_fu_656_ap_start = grp_reg_int_s_fu_656_ap_start_reg;

assign grp_reg_int_s_fu_693_ap_start = grp_reg_int_s_fu_693_ap_start_reg;

assign grp_reg_int_s_fu_718_ap_start = grp_reg_int_s_fu_718_ap_start_reg;

assign grp_reg_int_s_fu_731_ap_start = grp_reg_int_s_fu_731_ap_start_reg;

assign p1_hpc10_fu_250_p2 = (b0_preshared_hpc10_fu_226_p2 & Q0_0_fu_196_p2);

assign p1_hpc11_fu_322_p0 = x1_0;

assign p1_hpc11_fu_322_p2 = (p1_hpc11_fu_322_p0 & b0_preshared_hpc11_fu_292_p2);

assign p1_hpc12_fu_454_p2 = (b0_preshared_hpc12_fu_424_p2 & Q2_0_fu_364_p2);

assign p1_hpc13_fu_526_p2 = (b0_preshared_hpc13_fu_496_p2 & Q6_0_fu_382_p2);

assign p2_hpc10_fu_238_p2 = (b1_preshared_hpc10_fu_232_p2 & Q0_0_fu_196_p2);

assign p2_hpc11_fu_310_p0 = x1_0;

assign p2_hpc11_fu_310_p2 = (p2_hpc11_fu_310_p0 & b1_preshared_hpc11_fu_304_p2);

assign p2_hpc12_fu_442_p2 = (b1_preshared_hpc12_fu_436_p2 & Q2_0_fu_364_p2);

assign p2_hpc13_fu_514_p2 = (b1_preshared_hpc13_fu_508_p2 & Q6_0_fu_382_p2);

assign p3_hpc10_fu_244_p2 = (b0_preshared_hpc10_fu_226_p2 & Q0_1_fu_214_p2);

assign p3_hpc11_fu_316_p0 = x1_1;

assign p3_hpc11_fu_316_p2 = (p3_hpc11_fu_316_p0 & b0_preshared_hpc11_fu_292_p2);

assign p3_hpc12_fu_448_p2 = (b0_preshared_hpc12_fu_424_p2 & Q2_1_fu_394_p2);

assign p3_hpc13_fu_520_p2 = (b0_preshared_hpc13_fu_496_p2 & Q6_1_fu_412_p2);

assign p4_hpc10_fu_256_p2 = (b1_preshared_hpc10_fu_232_p2 & Q0_1_fu_214_p2);

assign p4_hpc11_fu_328_p0 = x1_1;

assign p4_hpc11_fu_328_p2 = (p4_hpc11_fu_328_p0 & b1_preshared_hpc11_fu_304_p2);

assign p4_hpc12_fu_460_p2 = (b1_preshared_hpc12_fu_436_p2 & Q2_1_fu_394_p2);

assign p4_hpc13_fu_532_p2 = (b1_preshared_hpc13_fu_508_p2 & Q6_1_fu_412_p2);

assign xor_ln117_fu_262_p1 = r2;

assign xor_ln117_fu_262_p2 = (xor_ln117_fu_262_p1 ^ p1_hpc10_fu_250_p2);

assign xor_ln118_fu_274_p1 = r2;

assign xor_ln118_fu_274_p2 = (xor_ln118_fu_274_p1 ^ p4_hpc10_fu_256_p2);

assign xor_ln129_fu_286_p0 = x2_0;

assign xor_ln129_fu_286_p1 = r1;

assign xor_ln129_fu_286_p2 = (xor_ln129_fu_286_p1 ^ xor_ln129_fu_286_p0);

assign xor_ln130_fu_298_p0 = x2_1;

assign xor_ln130_fu_298_p1 = r1;

assign xor_ln130_fu_298_p2 = (xor_ln130_fu_298_p1 ^ xor_ln130_fu_298_p0);

assign xor_ln137_fu_334_p1 = r2;

assign xor_ln137_fu_334_p2 = (xor_ln137_fu_334_p1 ^ p1_hpc11_fu_322_p2);

assign xor_ln138_fu_346_p1 = r2;

assign xor_ln138_fu_346_p2 = (xor_ln138_fu_346_p1 ^ p4_hpc11_fu_328_p2);

assign xor_ln139_fu_358_p1 = x2_0;

assign xor_ln139_fu_358_p2 = (xor_ln139_fu_358_p1 ^ T0_0_fu_268_p2);

assign xor_ln142_1_fu_376_p0 = x3_0;

assign xor_ln142_1_fu_376_p2 = (xor_ln142_1_fu_376_p0 ^ Q0_0_fu_196_p2);

assign xor_ln142_fu_370_p2 = (T2_0_fu_340_p2 ^ T0_0_fu_268_p2);

assign xor_ln143_fu_388_p1 = x2_1;

assign xor_ln143_fu_388_p2 = (xor_ln143_fu_388_p1 ^ T0_1_fu_280_p2);

assign xor_ln146_1_fu_406_p0 = x3_1;

assign xor_ln146_1_fu_406_p2 = (xor_ln146_1_fu_406_p0 ^ Q0_1_fu_214_p2);

assign xor_ln146_fu_400_p2 = (T2_1_fu_352_p2 ^ T0_1_fu_280_p2);

assign xor_ln155_fu_418_p0 = x3_0;

assign xor_ln155_fu_418_p1 = r1;

assign xor_ln155_fu_418_p2 = (xor_ln155_fu_418_p1 ^ xor_ln155_fu_418_p0);

assign xor_ln156_fu_430_p0 = x3_1;

assign xor_ln156_fu_430_p1 = r1;

assign xor_ln156_fu_430_p2 = (xor_ln156_fu_430_p1 ^ xor_ln156_fu_430_p0);

assign xor_ln163_fu_466_p1 = r2;

assign xor_ln163_fu_466_p2 = (xor_ln163_fu_466_p1 ^ p1_hpc12_fu_454_p2);

assign xor_ln164_fu_478_p1 = r2;

assign xor_ln164_fu_478_p2 = (xor_ln164_fu_478_p1 ^ p4_hpc12_fu_460_p2);

assign xor_ln173_fu_490_p1 = r1;

assign xor_ln173_fu_490_p2 = (xor_ln173_fu_490_p1 ^ L5_0_fu_172_p2);

assign xor_ln174_fu_502_p1 = r1;

assign xor_ln174_fu_502_p2 = (xor_ln174_fu_502_p1 ^ L5_1_fu_184_p2);

assign xor_ln191_1_fu_550_p1 = x3_0;

assign xor_ln191_1_fu_550_p2 = (xor_ln191_1_fu_550_p1 ^ T2_0_fu_340_p2);

assign xor_ln191_fu_556_p2 = (xor_ln191_1_fu_550_p2 ^ L7_0_fu_538_p2);

assign xor_ln192_1_fu_569_p1 = x0_0;

assign xor_ln192_1_fu_569_p2 = (xor_ln192_1_fu_569_p1 ^ p1_hpc13_fu_526_p2);

assign xor_ln192_2_fu_575_p1 = x2_0;

assign xor_ln192_2_fu_575_p2 = (xor_ln192_2_fu_575_p1 ^ xor_ln192_1_fu_569_p2);

assign xor_ln192_3_fu_581_p2 = (p2_hpc13_fu_514_p2 ^ L7_0_fu_538_p2);

assign xor_ln192_4_fu_587_p1 = r2;

assign xor_ln192_4_fu_587_p2 = (xor_ln192_4_fu_587_p1 ^ xor_ln192_3_fu_581_p2);

assign xor_ln192_fu_593_p2 = (xor_ln192_4_fu_587_p2 ^ xor_ln192_2_fu_575_p2);

assign xor_ln193_1_fu_606_p1 = x2_0;

assign xor_ln193_1_fu_606_p2 = (xor_ln193_1_fu_606_p1 ^ L1_0_fu_166_p2);

assign xor_ln193_2_fu_612_p2 = (T2_0_fu_340_p2 ^ T1_0_fu_472_p2);

assign xor_ln193_fu_618_p2 = (xor_ln193_2_fu_612_p2 ^ xor_ln193_1_fu_606_p2);

assign xor_ln194_fu_631_p2 = (T2_0_fu_340_p2 ^ L5_0_fu_172_p2);

assign xor_ln195_1_fu_644_p1 = x3_1;

assign xor_ln195_1_fu_644_p2 = (xor_ln195_1_fu_644_p1 ^ T2_1_fu_352_p2);

assign xor_ln195_fu_650_p2 = (xor_ln195_1_fu_644_p2 ^ L7_1_fu_544_p2);

assign xor_ln196_1_fu_663_p1 = x0_1;

assign xor_ln196_1_fu_663_p2 = (xor_ln196_1_fu_663_p1 ^ p4_hpc13_fu_532_p2);

assign xor_ln196_2_fu_669_p1 = x2_1;

assign xor_ln196_2_fu_669_p2 = (xor_ln196_2_fu_669_p1 ^ xor_ln196_1_fu_663_p2);

assign xor_ln196_3_fu_675_p2 = (p3_hpc13_fu_520_p2 ^ L7_1_fu_544_p2);

assign xor_ln196_4_fu_681_p1 = r2;

assign xor_ln196_4_fu_681_p2 = (xor_ln196_4_fu_681_p1 ^ xor_ln196_3_fu_675_p2);

assign xor_ln196_fu_687_p2 = (xor_ln196_4_fu_681_p2 ^ xor_ln196_2_fu_669_p2);

assign xor_ln197_1_fu_700_p1 = x2_1;

assign xor_ln197_1_fu_700_p2 = (xor_ln197_1_fu_700_p1 ^ L1_1_fu_178_p2);

assign xor_ln197_2_fu_706_p2 = (T2_1_fu_352_p2 ^ T1_1_fu_484_p2);

assign xor_ln197_fu_712_p2 = (xor_ln197_2_fu_706_p2 ^ xor_ln197_1_fu_700_p2);

assign xor_ln198_fu_725_p2 = (T2_1_fu_352_p2 ^ L5_1_fu_184_p2);

assign xor_ln89_fu_190_p0 = x1_0;

assign xor_ln89_fu_190_p1 = x2_0;

assign xor_ln89_fu_190_p2 = (xor_ln89_fu_190_p1 ^ xor_ln89_fu_190_p0);

assign xor_ln93_fu_208_p0 = x1_1;

assign xor_ln93_fu_208_p1 = x2_1;

assign xor_ln93_fu_208_p2 = (xor_ln93_fu_208_p1 ^ xor_ln93_fu_208_p0);

endmodule //sbox
