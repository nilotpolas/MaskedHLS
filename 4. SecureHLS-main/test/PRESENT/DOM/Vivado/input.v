// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================



module reg_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] x;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return <= x;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

endmodule //reg_int_s

module sbox (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0_0,
        x1_0,
        x2_0,
        x3_0,
        x0_1,
        x1_1,
        x2_1,
        x3_1,
        r,
        Y0_0,
        Y0_0_ap_vld,
        Y1_0,
        Y1_0_ap_vld,
        Y2_0,
        Y2_0_ap_vld,
        Y3_0,
        Y3_0_ap_vld,
        Y0_1,
        Y0_1_ap_vld,
        Y1_1,
        Y1_1_ap_vld,
        Y2_1,
        Y2_1_ap_vld,
        Y3_1,
        Y3_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x0_0;
input   x1_0;
input   x2_0;
input   x3_0;
input   x0_1;
input   x1_1;
input   x2_1;
input   x3_1;
input   r;
output   Y0_0;
output   Y0_0_ap_vld;
output   Y1_0;
output   Y1_0_ap_vld;
output   Y2_0;
output   Y2_0_ap_vld;
output   Y3_0;
output   Y3_0_ap_vld;
output   Y0_1;
output   Y0_1_ap_vld;
output   Y1_1;
output   Y1_1_ap_vld;
output   Y2_1;
output   Y2_1_ap_vld;
output   Y3_1;
output   Y3_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Y0_0_ap_vld;
reg Y1_0_ap_vld;
reg Y2_0_ap_vld;
reg Y3_0_ap_vld;
reg Y0_1_ap_vld;
reg Y1_1_ap_vld;
reg Y2_1_ap_vld;
reg Y3_1_ap_vld;

reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] xor_ln173_fu_500_p2;
reg   [0:0] xor_ln173_reg_682;
wire   [0:0] xor_ln174_fu_537_p2;
reg   [0:0] xor_ln174_reg_687;
wire   [0:0] xor_ln175_fu_562_p2;
reg   [0:0] xor_ln175_reg_692;
wire   [0:0] xor_ln176_fu_575_p2;
reg   [0:0] xor_ln176_reg_697;
wire   [0:0] xor_ln177_fu_594_p2;
reg   [0:0] xor_ln177_reg_702;
wire   [0:0] xor_ln178_fu_631_p2;
reg   [0:0] xor_ln178_reg_707;
wire   [0:0] xor_ln179_fu_656_p2;
reg   [0:0] xor_ln179_reg_712;
wire   [0:0] xor_ln180_fu_669_p2;
reg   [0:0] xor_ln180_reg_717;
wire    grp_reg_int_s_fu_506_ap_start;
wire    grp_reg_int_s_fu_506_ap_done;
wire    grp_reg_int_s_fu_506_ap_idle;
wire    grp_reg_int_s_fu_506_ap_ready;
wire   [0:0] grp_reg_int_s_fu_506_ap_return;
wire    grp_reg_int_s_fu_543_ap_start;
wire    grp_reg_int_s_fu_543_ap_done;
wire    grp_reg_int_s_fu_543_ap_idle;
wire    grp_reg_int_s_fu_543_ap_ready;
wire   [0:0] grp_reg_int_s_fu_543_ap_return;
wire    grp_reg_int_s_fu_568_ap_start;
wire    grp_reg_int_s_fu_568_ap_done;
wire    grp_reg_int_s_fu_568_ap_idle;
wire    grp_reg_int_s_fu_568_ap_ready;
wire   [0:0] grp_reg_int_s_fu_568_ap_return;
wire    grp_reg_int_s_fu_581_ap_start;
wire    grp_reg_int_s_fu_581_ap_done;
wire    grp_reg_int_s_fu_581_ap_idle;
wire    grp_reg_int_s_fu_581_ap_ready;
wire   [0:0] grp_reg_int_s_fu_581_ap_return;
wire    grp_reg_int_s_fu_600_ap_start;
wire    grp_reg_int_s_fu_600_ap_done;
wire    grp_reg_int_s_fu_600_ap_idle;
wire    grp_reg_int_s_fu_600_ap_ready;
wire   [0:0] grp_reg_int_s_fu_600_ap_return;
wire    grp_reg_int_s_fu_637_ap_start;
wire    grp_reg_int_s_fu_637_ap_done;
wire    grp_reg_int_s_fu_637_ap_idle;
wire    grp_reg_int_s_fu_637_ap_ready;
wire   [0:0] grp_reg_int_s_fu_637_ap_return;
wire    grp_reg_int_s_fu_662_ap_start;
wire    grp_reg_int_s_fu_662_ap_done;
wire    grp_reg_int_s_fu_662_ap_idle;
wire    grp_reg_int_s_fu_662_ap_ready;
wire   [0:0] grp_reg_int_s_fu_662_ap_return;
wire    grp_reg_int_s_fu_675_ap_start;
wire    grp_reg_int_s_fu_675_ap_done;
wire    grp_reg_int_s_fu_675_ap_idle;
wire    grp_reg_int_s_fu_675_ap_ready;
wire   [0:0] grp_reg_int_s_fu_675_ap_return;
reg    grp_reg_int_s_fu_506_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_reg_int_s_fu_543_ap_start_reg;
reg    grp_reg_int_s_fu_568_ap_start_reg;
reg    grp_reg_int_s_fu_581_ap_start_reg;
reg    grp_reg_int_s_fu_600_ap_start_reg;
reg    grp_reg_int_s_fu_637_ap_start_reg;
reg    grp_reg_int_s_fu_662_ap_start_reg;
reg    grp_reg_int_s_fu_675_ap_start_reg;
reg    ap_block_state2_on_subcall_done;
wire   [0:0] L1_0_fu_158_p0;
wire   [0:0] L1_0_fu_158_p1;
wire   [0:0] L5_0_fu_164_p0;
wire   [0:0] L5_0_fu_164_p1;
wire   [0:0] L1_1_fu_170_p0;
wire   [0:0] L1_1_fu_170_p1;
wire   [0:0] L5_1_fu_176_p0;
wire   [0:0] L5_1_fu_176_p1;
wire   [0:0] xor_ln87_fu_182_p0;
wire   [0:0] xor_ln87_fu_182_p1;
wire   [0:0] xor_ln87_fu_182_p2;
wire   [0:0] L1_0_fu_158_p2;
wire   [0:0] Q3_0_fu_200_p0;
wire   [0:0] Q4_0_fu_206_p0;
wire   [0:0] xor_ln91_fu_212_p0;
wire   [0:0] xor_ln91_fu_212_p1;
wire   [0:0] xor_ln91_fu_212_p2;
wire   [0:0] L1_1_fu_170_p2;
wire   [0:0] Q3_1_fu_230_p0;
wire   [0:0] Q4_1_fu_236_p0;
wire   [0:0] Q0_0_fu_188_p2;
wire   [0:0] Q1_1_fu_224_p2;
wire   [0:0] Q0_1_fu_218_p2;
wire   [0:0] Q1_0_fu_194_p2;
wire   [0:0] p1_domand0_fu_254_p2;
wire   [0:0] xor_ln111_fu_266_p1;
wire   [0:0] xor_ln111_fu_266_p2;
wire   [0:0] p2_domand0_fu_242_p2;
wire   [0:0] p4_domand0_fu_260_p2;
wire   [0:0] xor_ln112_fu_278_p1;
wire   [0:0] xor_ln112_fu_278_p2;
wire   [0:0] p3_domand0_fu_248_p2;
wire   [0:0] p2_domand1_fu_290_p0;
wire   [0:0] Q4_1_fu_236_p2;
wire   [0:0] p3_domand1_fu_296_p0;
wire   [0:0] Q4_0_fu_206_p2;
wire   [0:0] p1_domand1_fu_302_p0;
wire   [0:0] p4_domand1_fu_308_p0;
wire   [0:0] p1_domand1_fu_302_p2;
wire   [0:0] xor_ln127_fu_314_p1;
wire   [0:0] xor_ln127_fu_314_p2;
wire   [0:0] p2_domand1_fu_290_p2;
wire   [0:0] p4_domand1_fu_308_p2;
wire   [0:0] xor_ln128_fu_326_p1;
wire   [0:0] xor_ln128_fu_326_p2;
wire   [0:0] p3_domand1_fu_296_p2;
wire   [0:0] T0_0_fu_272_p2;
wire   [0:0] xor_ln129_fu_338_p1;
wire   [0:0] xor_ln129_fu_338_p2;
wire   [0:0] L5_0_fu_164_p2;
wire   [0:0] T2_0_fu_320_p2;
wire   [0:0] xor_ln132_1_fu_362_p0;
wire   [0:0] xor_ln132_1_fu_362_p2;
wire   [0:0] xor_ln132_fu_356_p2;
wire   [0:0] T0_1_fu_284_p2;
wire   [0:0] xor_ln133_fu_374_p1;
wire   [0:0] xor_ln133_fu_374_p2;
wire   [0:0] L5_1_fu_176_p2;
wire   [0:0] T2_1_fu_332_p2;
wire   [0:0] xor_ln136_1_fu_398_p0;
wire   [0:0] xor_ln136_1_fu_398_p2;
wire   [0:0] xor_ln136_fu_392_p2;
wire   [0:0] Q2_0_fu_344_p2;
wire   [0:0] Q3_1_fu_230_p2;
wire   [0:0] Q2_1_fu_380_p2;
wire   [0:0] Q3_0_fu_200_p2;
wire   [0:0] p1_domand2_fu_422_p2;
wire   [0:0] xor_ln149_fu_434_p1;
wire   [0:0] xor_ln149_fu_434_p2;
wire   [0:0] p2_domand2_fu_410_p2;
wire   [0:0] p4_domand2_fu_428_p2;
wire   [0:0] xor_ln150_fu_446_p1;
wire   [0:0] xor_ln150_fu_446_p2;
wire   [0:0] p3_domand2_fu_416_p2;
wire   [0:0] Q6_0_fu_368_p2;
wire   [0:0] Q7_1_fu_386_p2;
wire   [0:0] Q6_1_fu_404_p2;
wire   [0:0] Q7_0_fu_350_p2;
wire   [0:0] T1_0_fu_440_p2;
wire   [0:0] T1_1_fu_452_p2;
wire   [0:0] xor_ln173_1_fu_494_p1;
wire   [0:0] xor_ln173_1_fu_494_p2;
wire   [0:0] L7_0_fu_482_p2;
wire   [0:0] p1_domand3_fu_470_p2;
wire   [0:0] xor_ln174_1_fu_513_p1;
wire   [0:0] xor_ln174_1_fu_513_p2;
wire   [0:0] xor_ln174_2_fu_519_p1;
wire   [0:0] p2_domand3_fu_458_p2;
wire   [0:0] xor_ln174_3_fu_525_p2;
wire   [0:0] xor_ln174_4_fu_531_p1;
wire   [0:0] xor_ln174_4_fu_531_p2;
wire   [0:0] xor_ln174_2_fu_519_p2;
wire   [0:0] xor_ln175_1_fu_550_p1;
wire   [0:0] xor_ln175_2_fu_556_p2;
wire   [0:0] xor_ln175_1_fu_550_p2;
wire   [0:0] xor_ln177_1_fu_588_p1;
wire   [0:0] xor_ln177_1_fu_588_p2;
wire   [0:0] L7_1_fu_488_p2;
wire   [0:0] p4_domand3_fu_476_p2;
wire   [0:0] xor_ln178_1_fu_607_p1;
wire   [0:0] xor_ln178_1_fu_607_p2;
wire   [0:0] xor_ln178_2_fu_613_p1;
wire   [0:0] p3_domand3_fu_464_p2;
wire   [0:0] xor_ln178_3_fu_619_p2;
wire   [0:0] xor_ln178_4_fu_625_p1;
wire   [0:0] xor_ln178_4_fu_625_p2;
wire   [0:0] xor_ln178_2_fu_613_p2;
wire   [0:0] xor_ln179_1_fu_644_p1;
wire   [0:0] xor_ln179_2_fu_650_p2;
wire   [0:0] xor_ln179_1_fu_644_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_reg_int_s_fu_506_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_543_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_568_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_581_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_600_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_637_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_662_ap_start_reg = 1'b0;
#0 grp_reg_int_s_fu_675_ap_start_reg = 1'b0;
end

reg_int_s grp_reg_int_s_fu_506(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_506_ap_start),
    .ap_done(grp_reg_int_s_fu_506_ap_done),
    .ap_idle(grp_reg_int_s_fu_506_ap_idle),
    .ap_ready(grp_reg_int_s_fu_506_ap_ready),
    .x(xor_ln173_reg_682),
    .ap_return(grp_reg_int_s_fu_506_ap_return)
);

reg_int_s grp_reg_int_s_fu_543(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_543_ap_start),
    .ap_done(grp_reg_int_s_fu_543_ap_done),
    .ap_idle(grp_reg_int_s_fu_543_ap_idle),
    .ap_ready(grp_reg_int_s_fu_543_ap_ready),
    .x(xor_ln174_reg_687),
    .ap_return(grp_reg_int_s_fu_543_ap_return)
);

reg_int_s grp_reg_int_s_fu_568(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_568_ap_start),
    .ap_done(grp_reg_int_s_fu_568_ap_done),
    .ap_idle(grp_reg_int_s_fu_568_ap_idle),
    .ap_ready(grp_reg_int_s_fu_568_ap_ready),
    .x(xor_ln175_reg_692),
    .ap_return(grp_reg_int_s_fu_568_ap_return)
);

reg_int_s grp_reg_int_s_fu_581(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_581_ap_start),
    .ap_done(grp_reg_int_s_fu_581_ap_done),
    .ap_idle(grp_reg_int_s_fu_581_ap_idle),
    .ap_ready(grp_reg_int_s_fu_581_ap_ready),
    .x(xor_ln176_reg_697),
    .ap_return(grp_reg_int_s_fu_581_ap_return)
);

reg_int_s grp_reg_int_s_fu_600(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_600_ap_start),
    .ap_done(grp_reg_int_s_fu_600_ap_done),
    .ap_idle(grp_reg_int_s_fu_600_ap_idle),
    .ap_ready(grp_reg_int_s_fu_600_ap_ready),
    .x(xor_ln177_reg_702),
    .ap_return(grp_reg_int_s_fu_600_ap_return)
);

reg_int_s grp_reg_int_s_fu_637(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_637_ap_start),
    .ap_done(grp_reg_int_s_fu_637_ap_done),
    .ap_idle(grp_reg_int_s_fu_637_ap_idle),
    .ap_ready(grp_reg_int_s_fu_637_ap_ready),
    .x(xor_ln178_reg_707),
    .ap_return(grp_reg_int_s_fu_637_ap_return)
);

reg_int_s grp_reg_int_s_fu_662(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_662_ap_start),
    .ap_done(grp_reg_int_s_fu_662_ap_done),
    .ap_idle(grp_reg_int_s_fu_662_ap_idle),
    .ap_ready(grp_reg_int_s_fu_662_ap_ready),
    .x(xor_ln179_reg_712),
    .ap_return(grp_reg_int_s_fu_662_ap_return)
);

reg_int_s grp_reg_int_s_fu_675(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_int_s_fu_675_ap_start),
    .ap_done(grp_reg_int_s_fu_675_ap_done),
    .ap_idle(grp_reg_int_s_fu_675_ap_idle),
    .ap_ready(grp_reg_int_s_fu_675_ap_ready),
    .x(xor_ln180_reg_717),
    .ap_return(grp_reg_int_s_fu_675_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_506_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_506_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_506_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_506_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_543_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_543_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_543_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_543_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_568_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_568_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_568_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_568_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_581_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_581_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_581_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_581_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_600_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_600_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_600_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_600_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_637_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_637_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_637_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_637_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_662_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_662_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_662_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_662_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_int_s_fu_675_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_int_s_fu_675_ap_start_reg <= 1'b1;
        end else if ((grp_reg_int_s_fu_675_ap_ready == 1'b1)) begin
            grp_reg_int_s_fu_675_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        xor_ln173_reg_682 <= xor_ln173_fu_500_p2;
        xor_ln174_reg_687 <= xor_ln174_fu_537_p2;
        xor_ln175_reg_692 <= xor_ln175_fu_562_p2;
        xor_ln176_reg_697 <= xor_ln176_fu_575_p2;
        xor_ln177_reg_702 <= xor_ln177_fu_594_p2;
        xor_ln178_reg_707 <= xor_ln178_fu_631_p2;
        xor_ln179_reg_712 <= xor_ln179_fu_656_p2;
        xor_ln180_reg_717 <= xor_ln180_fu_669_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y0_0_ap_vld = 1'b1;
    end else begin
        Y0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y0_1_ap_vld = 1'b1;
    end else begin
        Y0_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y1_0_ap_vld = 1'b1;
    end else begin
        Y1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y1_1_ap_vld = 1'b1;
    end else begin
        Y1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y2_0_ap_vld = 1'b1;
    end else begin
        Y2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y2_1_ap_vld = 1'b1;
    end else begin
        Y2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y3_0_ap_vld = 1'b1;
    end else begin
        Y3_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        Y3_1_ap_vld = 1'b1;
    end else begin
        Y3_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_0_fu_158_p0 = x0_0;

assign L1_0_fu_158_p1 = x1_0;

assign L1_0_fu_158_p2 = (L1_0_fu_158_p1 ^ L1_0_fu_158_p0);

assign L1_1_fu_170_p0 = x0_1;

assign L1_1_fu_170_p1 = x1_1;

assign L1_1_fu_170_p2 = (L1_1_fu_170_p1 ^ L1_1_fu_170_p0);

assign L5_0_fu_164_p0 = x0_0;

assign L5_0_fu_164_p1 = x3_0;

assign L5_0_fu_164_p2 = (L5_0_fu_164_p1 ^ L5_0_fu_164_p0);

assign L5_1_fu_176_p0 = x0_1;

assign L5_1_fu_176_p1 = x3_1;

assign L5_1_fu_176_p2 = (L5_1_fu_176_p1 ^ L5_1_fu_176_p0);

assign L7_0_fu_482_p2 = (T1_0_fu_440_p2 ^ T0_0_fu_272_p2);

assign L7_1_fu_488_p2 = (T1_1_fu_452_p2 ^ T0_1_fu_284_p2);

assign Q0_0_fu_188_p2 = (xor_ln87_fu_182_p2 ^ 1'd1);

assign Q0_1_fu_218_p2 = (xor_ln91_fu_212_p2 ^ 1'd1);

assign Q1_0_fu_194_p2 = (1'd1 ^ L1_0_fu_158_p2);

assign Q1_1_fu_224_p2 = (1'd1 ^ L1_1_fu_170_p2);

assign Q2_0_fu_344_p2 = (xor_ln129_fu_338_p2 ^ Q1_0_fu_194_p2);

assign Q2_1_fu_380_p2 = (xor_ln133_fu_374_p2 ^ Q1_1_fu_224_p2);

assign Q3_0_fu_200_p0 = x3_0;

assign Q3_0_fu_200_p2 = (1'd1 ^ Q3_0_fu_200_p0);

assign Q3_1_fu_230_p0 = x3_1;

assign Q3_1_fu_230_p2 = (1'd1 ^ Q3_1_fu_230_p0);

assign Q4_0_fu_206_p0 = x2_0;

assign Q4_0_fu_206_p2 = (1'd1 ^ Q4_0_fu_206_p0);

assign Q4_1_fu_236_p0 = x2_1;

assign Q4_1_fu_236_p2 = (1'd1 ^ Q4_1_fu_236_p0);

assign Q6_0_fu_368_p2 = (xor_ln132_fu_356_p2 ^ xor_ln132_1_fu_362_p2);

assign Q6_1_fu_404_p2 = (xor_ln136_fu_392_p2 ^ xor_ln136_1_fu_398_p2);

assign Q7_0_fu_350_p2 = (T0_0_fu_272_p2 ^ L5_0_fu_164_p2);

assign Q7_1_fu_386_p2 = (T0_1_fu_284_p2 ^ L5_1_fu_176_p2);

assign T0_0_fu_272_p2 = (xor_ln111_fu_266_p2 ^ p2_domand0_fu_242_p2);

assign T0_1_fu_284_p2 = (xor_ln112_fu_278_p2 ^ p3_domand0_fu_248_p2);

assign T1_0_fu_440_p2 = (xor_ln149_fu_434_p2 ^ p2_domand2_fu_410_p2);

assign T1_1_fu_452_p2 = (xor_ln150_fu_446_p2 ^ p3_domand2_fu_416_p2);

assign T2_0_fu_320_p2 = (xor_ln127_fu_314_p2 ^ p2_domand1_fu_290_p2);

assign T2_1_fu_332_p2 = (xor_ln128_fu_326_p2 ^ p3_domand1_fu_296_p2);

assign Y0_0 = grp_reg_int_s_fu_506_ap_return;

assign Y0_1 = grp_reg_int_s_fu_600_ap_return;

assign Y1_0 = grp_reg_int_s_fu_543_ap_return;

assign Y1_1 = grp_reg_int_s_fu_637_ap_return;

assign Y2_0 = grp_reg_int_s_fu_568_ap_return;

assign Y2_1 = grp_reg_int_s_fu_662_ap_return;

assign Y3_0 = grp_reg_int_s_fu_581_ap_return;

assign Y3_1 = grp_reg_int_s_fu_675_ap_return;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_int_s_fu_600_ap_done == 1'b0) | (grp_reg_int_s_fu_581_ap_done == 1'b0) | (grp_reg_int_s_fu_568_ap_done == 1'b0) | (grp_reg_int_s_fu_543_ap_done == 1'b0) | (grp_reg_int_s_fu_506_ap_done == 1'b0) | (grp_reg_int_s_fu_675_ap_done == 1'b0) | (grp_reg_int_s_fu_662_ap_done == 1'b0) | (grp_reg_int_s_fu_637_ap_done == 1'b0));
end

assign grp_reg_int_s_fu_506_ap_start = grp_reg_int_s_fu_506_ap_start_reg;

assign grp_reg_int_s_fu_543_ap_start = grp_reg_int_s_fu_543_ap_start_reg;

assign grp_reg_int_s_fu_568_ap_start = grp_reg_int_s_fu_568_ap_start_reg;

assign grp_reg_int_s_fu_581_ap_start = grp_reg_int_s_fu_581_ap_start_reg;

assign grp_reg_int_s_fu_600_ap_start = grp_reg_int_s_fu_600_ap_start_reg;

assign grp_reg_int_s_fu_637_ap_start = grp_reg_int_s_fu_637_ap_start_reg;

assign grp_reg_int_s_fu_662_ap_start = grp_reg_int_s_fu_662_ap_start_reg;

assign grp_reg_int_s_fu_675_ap_start = grp_reg_int_s_fu_675_ap_start_reg;

assign p1_domand0_fu_254_p2 = (Q1_0_fu_194_p2 & Q0_0_fu_188_p2);

assign p1_domand1_fu_302_p0 = x1_0;

assign p1_domand1_fu_302_p2 = (p1_domand1_fu_302_p0 & Q4_0_fu_206_p2);

assign p1_domand2_fu_422_p2 = (Q3_0_fu_200_p2 & Q2_0_fu_344_p2);

assign p1_domand3_fu_470_p2 = (Q7_0_fu_350_p2 & Q6_0_fu_368_p2);

assign p2_domand0_fu_242_p2 = (Q1_1_fu_224_p2 & Q0_0_fu_188_p2);

assign p2_domand1_fu_290_p0 = x1_0;

assign p2_domand1_fu_290_p2 = (p2_domand1_fu_290_p0 & Q4_1_fu_236_p2);

assign p2_domand2_fu_410_p2 = (Q3_1_fu_230_p2 & Q2_0_fu_344_p2);

assign p2_domand3_fu_458_p2 = (Q7_1_fu_386_p2 & Q6_0_fu_368_p2);

assign p3_domand0_fu_248_p2 = (Q1_0_fu_194_p2 & Q0_1_fu_218_p2);

assign p3_domand1_fu_296_p0 = x1_1;

assign p3_domand1_fu_296_p2 = (p3_domand1_fu_296_p0 & Q4_0_fu_206_p2);

assign p3_domand2_fu_416_p2 = (Q3_0_fu_200_p2 & Q2_1_fu_380_p2);

assign p3_domand3_fu_464_p2 = (Q7_0_fu_350_p2 & Q6_1_fu_404_p2);

assign p4_domand0_fu_260_p2 = (Q1_1_fu_224_p2 & Q0_1_fu_218_p2);

assign p4_domand1_fu_308_p0 = x1_1;

assign p4_domand1_fu_308_p2 = (p4_domand1_fu_308_p0 & Q4_1_fu_236_p2);

assign p4_domand2_fu_428_p2 = (Q3_1_fu_230_p2 & Q2_1_fu_380_p2);

assign p4_domand3_fu_476_p2 = (Q7_1_fu_386_p2 & Q6_1_fu_404_p2);

assign xor_ln111_fu_266_p1 = r;

assign xor_ln111_fu_266_p2 = (xor_ln111_fu_266_p1 ^ p1_domand0_fu_254_p2);

assign xor_ln112_fu_278_p1 = r;

assign xor_ln112_fu_278_p2 = (xor_ln112_fu_278_p1 ^ p4_domand0_fu_260_p2);

assign xor_ln127_fu_314_p1 = r;

assign xor_ln127_fu_314_p2 = (xor_ln127_fu_314_p1 ^ p1_domand1_fu_302_p2);

assign xor_ln128_fu_326_p1 = r;

assign xor_ln128_fu_326_p2 = (xor_ln128_fu_326_p1 ^ p4_domand1_fu_308_p2);

assign xor_ln129_fu_338_p1 = x2_0;

assign xor_ln129_fu_338_p2 = (xor_ln129_fu_338_p1 ^ T0_0_fu_272_p2);

assign xor_ln132_1_fu_362_p0 = x3_0;

assign xor_ln132_1_fu_362_p2 = (xor_ln132_1_fu_362_p0 ^ Q0_0_fu_188_p2);

assign xor_ln132_fu_356_p2 = (T2_0_fu_320_p2 ^ T0_0_fu_272_p2);

assign xor_ln133_fu_374_p1 = x2_1;

assign xor_ln133_fu_374_p2 = (xor_ln133_fu_374_p1 ^ T0_1_fu_284_p2);

assign xor_ln136_1_fu_398_p0 = x3_1;

assign xor_ln136_1_fu_398_p2 = (xor_ln136_1_fu_398_p0 ^ Q0_1_fu_218_p2);

assign xor_ln136_fu_392_p2 = (T2_1_fu_332_p2 ^ T0_1_fu_284_p2);

assign xor_ln149_fu_434_p1 = r;

assign xor_ln149_fu_434_p2 = (xor_ln149_fu_434_p1 ^ p1_domand2_fu_422_p2);

assign xor_ln150_fu_446_p1 = r;

assign xor_ln150_fu_446_p2 = (xor_ln150_fu_446_p1 ^ p4_domand2_fu_428_p2);

assign xor_ln173_1_fu_494_p1 = x3_0;

assign xor_ln173_1_fu_494_p2 = (xor_ln173_1_fu_494_p1 ^ T2_0_fu_320_p2);

assign xor_ln173_fu_500_p2 = (xor_ln173_1_fu_494_p2 ^ L7_0_fu_482_p2);

assign xor_ln174_1_fu_513_p1 = x0_0;

assign xor_ln174_1_fu_513_p2 = (xor_ln174_1_fu_513_p1 ^ p1_domand3_fu_470_p2);

assign xor_ln174_2_fu_519_p1 = x2_0;

assign xor_ln174_2_fu_519_p2 = (xor_ln174_2_fu_519_p1 ^ xor_ln174_1_fu_513_p2);

assign xor_ln174_3_fu_525_p2 = (p2_domand3_fu_458_p2 ^ L7_0_fu_482_p2);

assign xor_ln174_4_fu_531_p1 = r;

assign xor_ln174_4_fu_531_p2 = (xor_ln174_4_fu_531_p1 ^ xor_ln174_3_fu_525_p2);

assign xor_ln174_fu_537_p2 = (xor_ln174_4_fu_531_p2 ^ xor_ln174_2_fu_519_p2);

assign xor_ln175_1_fu_550_p1 = x2_0;

assign xor_ln175_1_fu_550_p2 = (xor_ln175_1_fu_550_p1 ^ L1_0_fu_158_p2);

assign xor_ln175_2_fu_556_p2 = (T2_0_fu_320_p2 ^ T1_0_fu_440_p2);

assign xor_ln175_fu_562_p2 = (xor_ln175_2_fu_556_p2 ^ xor_ln175_1_fu_550_p2);

assign xor_ln176_fu_575_p2 = (T2_0_fu_320_p2 ^ L5_0_fu_164_p2);

assign xor_ln177_1_fu_588_p1 = x3_1;

assign xor_ln177_1_fu_588_p2 = (xor_ln177_1_fu_588_p1 ^ T2_1_fu_332_p2);

assign xor_ln177_fu_594_p2 = (xor_ln177_1_fu_588_p2 ^ L7_1_fu_488_p2);

assign xor_ln178_1_fu_607_p1 = x0_1;

assign xor_ln178_1_fu_607_p2 = (xor_ln178_1_fu_607_p1 ^ p4_domand3_fu_476_p2);

assign xor_ln178_2_fu_613_p1 = x2_1;

assign xor_ln178_2_fu_613_p2 = (xor_ln178_2_fu_613_p1 ^ xor_ln178_1_fu_607_p2);

assign xor_ln178_3_fu_619_p2 = (p3_domand3_fu_464_p2 ^ L7_1_fu_488_p2);

assign xor_ln178_4_fu_625_p1 = r;

assign xor_ln178_4_fu_625_p2 = (xor_ln178_4_fu_625_p1 ^ xor_ln178_3_fu_619_p2);

assign xor_ln178_fu_631_p2 = (xor_ln178_4_fu_625_p2 ^ xor_ln178_2_fu_613_p2);

assign xor_ln179_1_fu_644_p1 = x2_1;

assign xor_ln179_1_fu_644_p2 = (xor_ln179_1_fu_644_p1 ^ L1_1_fu_170_p2);

assign xor_ln179_2_fu_650_p2 = (T2_1_fu_332_p2 ^ T1_1_fu_452_p2);

assign xor_ln179_fu_656_p2 = (xor_ln179_2_fu_650_p2 ^ xor_ln179_1_fu_644_p2);

assign xor_ln180_fu_669_p2 = (T2_1_fu_332_p2 ^ L5_1_fu_176_p2);

assign xor_ln87_fu_182_p0 = x1_0;

assign xor_ln87_fu_182_p1 = x2_0;

assign xor_ln87_fu_182_p2 = (xor_ln87_fu_182_p1 ^ xor_ln87_fu_182_p0);

assign xor_ln91_fu_212_p0 = x1_1;

assign xor_ln91_fu_212_p1 = x2_1;

assign xor_ln91_fu_212_p2 = (xor_ln91_fu_212_p1 ^ xor_ln91_fu_212_p0);

endmodule //sbox
